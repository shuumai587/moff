package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/nippati/moff/pkg/moff"
)

func main() {
	// Parse command-line arguments
	vulsFilePath := flag.String("vuls-file", "", "Path to the JSON file generated by vuls")
	outputFilePath := flag.String("output-file", "playbook.yml", "Path to output the Ansible playbook")
	flag.Parse()

	if *vulsFilePath == "" {
		log.Fatal("Please provide the path to the JSON file generated by vuls using the -vuls-file flag")
	}

	// Parse vulnerabilities from vuls JSON file
	vulsData, err := ioutil.ReadFile(*vulsFilePath)
	if err != nil {
		log.Fatal(err)
	}

	var vulsJSON moff.VulsJSON
	err = json.Unmarshal(vulsData, &vulsJSON)
	if err != nil {
		log.Fatal(err)
	}

	vulnerabilities := make([]moff.Vulnerability, 0)
	for _, result := range vulsJSON.Results {
		for _, vul := range result.Vulnerabilities {
			// Extract package name from vul.PkgName field
			pkgName := strings.Split(vul.PkgName, ".")[0]
			vulnerabilities = append(vulnerabilities, moff.Vulnerability{
				CVEID:           vul.VulnerabilityID,
				PackageName:     pkgName,
				InstalledVer:    "",
				RecommendedVer:  "",
				Severity:        vul.Severity,
				InstalledPkgMgr: "",
			})
		}
	}

	// Display vulnerabilities in a web UI and get user-selected vulnerabilities
	selectedVulnerabilities, err := moff.DisplayVulnerabilities(vulnerabilities)
	if err != nil {
		log.Fatal(err)
	}

	// Generate Ansible playbook
	playbook := moff.GeneratePlaybook(selectedVulnerabilities)

	// Output playbook to file
	outputFile, err := os.Create(filepath.Clean(*outputFilePath))
	if err != nil {
		log.Fatal(err)
	}
	defer outputFile.Close()

	_, err = outputFile.WriteString(playbook)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Ansible playbook generated and saved to %s\n", *outputFilePath)
}
